객체 생성자(new)
: 함수를 통해서 새로운 객체를 만들고, 그 안에 넣고 싶은 값 혹은 함수들을 구현 할 수 있게 해준다.
객체 생성자 만들시 주로 대문자 시작. 
function Animals(type, name, sound) {
this.type = type;
this.name = name;
this.sound = sound;
this.say = function () {
console.log(this.sound);
const dog = new Animals('개', '뺀질이', '멍멍');
console.log(dog);
프로토타입(prototype)
이때, 새로운 Animals가 생성될 때 마다, 같은 함수(say)가 호출 되므로, 이 함수를 바깥으로 꺼내어 새로만든 객체에 적용 할 수 있도록 하는 것이 효율 적이다. 
이는 함수 뿐만 아니라 어떠한 값이 될수도 있다. 
고로, 프로토 타입은 객체생성자로 무언갈 만들었을 때, 만든 것들끼리 공유 할 수 있는 어떠한 값이나 함수 등을 말한다. 
function Animals(type, name, sound) {
this.type = type;
this.name = name;
this.sound = sound;
Animals.prototype.say = function () {
console.log(this.sound);
이렇게 일일이 새로운 객체에 say라는 함수를 적용시키는 것과 같은 원리이다.

객체 생성자 상속받기
function Dog(name,sound){
this.name=name;
this.sound=sound;
function Cat(name,sound){
this.type='고양이';
this.name=name;
this.sound=sound;
Dog.prototype.say=function(){
console.log(this.sound);
Cat.prototype.say=function(){
console.log(this.sound);
이 처럼, 형태가 비슷한 두가지가 있을 때 
상위에 이미 아래와 같은 함수가 있는 것을 활용한다. 
function Animals(type, name, sound) {
this.type = type;
this.name = name;
this.sound = sound;
Animals.prototype.say = function () {
console.log(this.sound);
const myDog = new Animals('강아지', '뺀질이', '월월');
console.log(myDog);
console.log(myDog.say());
최대한 Animals 함수를 활용하는 것이다.
function Hero1(name, sound) {
Animals.call(this, 'IronMan', name, sound);
function Hero2(name, sound) {
Animals.call(this, 'Captain America', name, sound);
Hero1.prototype = Animals.prototype;
Hero2.prototype = Animals.prototype;
const Avengers1 = new Hero1('토니 스타크', 'Hi');
const Avengers2 = new Hero2('스티브 로저스', 'Hello');
console.log(Avengers1);
console.log(Avengers2);

ES6-Class
class Animals {
constructor(type, name, sound) {
this.type = type;
this.name = name;
this.sound = sound;
}
say() {
console.log(this.sound);
}
}
const dog = new Animals("개", "뺀질이", "월월");
console.log(dog);
dog.say();
//여기서 class안에 함수를 만들면 자동으로 prototype으로 등록이 된다.

//상속받기
class Hero1 extends Animals {
constructor(name, sound) {
super('Iron Man', name, sound);
}
}
class Hero2 extends Animals {
constructor(name, sound) {
super('Captain America', name, sound);
}
}
const Avengers1 = new Hero1('토니 스타크', 'Hi');
const Avengers2 = new Hero2('스티브 로져스', 'Hello');
console.log(Avengers1);
console.log(Avengers2);
Avengers1.say();
